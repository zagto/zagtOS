.PHONY: all-efi clean-efi install-efi

PLATFORM_EFI_BUILD_DIR=$(SHBUILD_BUILD_DIR)/efi

CXX_SOURCES = $(shell find -L . -type f -name '*.cpp' -not -path './arch/*' -not -path './platform/*')
CXX_HEADERS = $(shell find -L . -type f -name '*.hpp' -not -path './arch/*' -not -path './platform/*')
CXX_SOURCES += $(shell find -L arch/$(ARCH) -type f -name '*.cpp')
CXX_HEADERS += $(shell find -L arch/$(ARCH) -type f -name '*.hpp')
CXX_SOURCES += $(shell find -L platform/efi -type f -name '*.cpp')
CXX_HEADERS += $(shell find -L platform/efi -type f -name '*.hpp')
CXX_HEADERS += $(shell find -L stdlib -type f)
CXX_OBJS = $(addprefix $(PLATFORM_EFI_BUILD_DIR)/, $(CXX_SOURCES:.cpp=.o))

ASM_SOURCES = $(shell find -L arch/$(ARCH) -type f -name '*.asm')
ASM_OBJS = $(addprefix $(PLATFORM_EFI_BUILD_DIR)/, $(ASM_SOURCES:.asm=.o))
CRTI_OBJ = $(PLATFORM_EFI_BUILD_DIR)/arch/$(ARCH)/lib/crt/crti.o
CRTN_OBJ = $(PLATFORM_EFI_BUILD_DIR)/arch/$(ARCH)/lib/crt/crtn.o
ASM_REGULER_OBJS = $(filter-out $(CRTI_OBJ), $(filter-out $(CRTN_OBJ), $(ASM_OBJS)))


SOFILE = $(PLATFORM_EFI_BUILD_DIR)/loader.so
ifeq ($(ARCH),x86_64)
    EFIFILE = $(PLATFORM_EFI_BUILD_DIR)/BOOTX64.EFI
endif

EFI_INCLUDE_BASE = /usr/include/efi
EFI_INCLUDES = -I$(EFI_INCLUDE_BASE) -I$(EFI_INCLUDE_BASE)/$(ARCH) -I$(EFI_INCLUDE_BASE)/protocol
EFI_LIB_BASE = /usr/lib64
EFI_CRT_OBJS = $(EFI_LIB_BASE)/crt0-efi-$(ARCH).o
EFI_LDS = $(EFI_LIB_BASE)/elf_$(ARCH)_efi.lds

CXX = $(ARCH)-elf-g++
LD = $(ARCH)-elf-ld

CXXFLAGS = $(EFI_INCLUDES) -Os -ffreestanding -fno-stack-protector -fpic -fshort-wchar -mno-red-zone -Wall -Wextra -Werror -I$(PWD) -I$(PWD)/stdlib -I$(PWD)/arch/$(ARCH) -I$(PWD)/platform/efi -DZAGTOS_LOADER
ifeq ($(ARCH),x86_64)
    CXXFLAGS += -DEFI_FUNCTION_WRAPPER
endif

LDFLAGS = -Os -ffreestanding  -nostdlib -znocombreloc -T $(EFI_LDS) -shared -Bsymbolic -L $(EFI_LIB_BASE) $(EFI_CRT_OBJS)

OBJCOPY_SECTIONS = -j .text -j .init -j .fini -j .sdata -j .data -j .dynamic -j .dynsym  -j .rel -j .rela -j .reloc


all-efi: $(EFIFILE)

$(EFIFILE): $(SOFILE)
	objcopy $(OBJCOPY_SECTIONS) --target=efi-app-$(ARCH) $^ $@

$(SOFILE): $(CXX_OBJS) $(ASM_OBJS)
	mkdir -p $(dir $@)
	$(LD) $(LDFLAGS) -o $@ $(CRTI_OBJ) $(C_OBJS) $(CXX_OBJS) $(ASM_REGULER_OBJS) $$(CRTN_OBJ) -lefi -lgnuefi

$(PLATFORM_EFI_BUILD_DIR)/%.o: %.asm
	mkdir -p $(dir $@)
	nasm -f elf64 -o $@ $^

$(PLATFORM_EFI_BUILD_DIR)/%.o: %.cpp $(CXX_HEADERS)
	mkdir -p $(dir $@)
	$(CXX) $(CXXFLAGS) -c -o $@ $<

clean-efi:
	rm -f $(CXX_OBJS) $(ASM_OBJS) $(EFIFILE) $(SOFILE)

