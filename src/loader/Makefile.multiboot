.PHONY: all-multiboot clean-multiboot install-multiboot

PLATFORM_MULTIBOOT_BUILD_DIR=$(SHBUILD_BUILD_DIR)/multiboot

CXX_SOURCES = $(shell find -L . -type f -name '*.cpp' -not -path './arch/*' -not -path './platform/*')
CXX_HEADERS = $(shell find -L . -type f -name '*.hpp' -not -path './arch/*' -not -path './platform/*')
CXX_SOURCES += $(shell find -L arch/$(ARCH) -type f -name '*.cpp')
CXX_HEADERS += $(shell find -L arch/$(ARCH) -type f -name '*.hpp')
CXX_SOURCES += $(shell find -L platform/multiboot -type f -name '*.cpp')
CXX_HEADERS += $(shell find -L platform/multiboot -type f -name '*.hpp')
CXX_HEADERS += $(shell find -L stdlib -type f)
CXX_OBJS = $(addprefix $(PLATFORM_MULTIBOOT_BUILD_DIR)/, $(CXX_SOURCES:.cpp=.o))

ASM_SOURCES = $(shell find -L arch/$(ARCH) -type f -name '*.asm')
ASM_SOURCES += $(shell find -L platform/multiboot -type f -name '*.asm')
ASM_OBJS = $(addprefix $(PLATFORM_MULTIBOOT_BUILD_DIR)/, $(ASM_SOURCES:.asm=.o))
CRTI_OBJ = $(PLATFORM_MULTIBOOT_BUILD_DIR)/arch/$(ARCH)/lib/crt/crti.o
CRTN_OBJ = $(PLATFORM_MULTIBOOT_BUILD_DIR)/arch/$(ARCH)/lib/crt/crtn.o
ASM_REGULER_OBJS = $(filter-out $(CRTI_OBJ), $(filter-out $(CRTN_OBJ), $(ASM_OBJS)))


SOFILE = $(PLATFORM_MULTIBOOT_BUILD_DIR)/loader.so

TARGET = $(PLATFORM_MULTIBOOT_BUILD_DIR)/zagtos-multiboot-loader

CXX = $(ARCH)-elf-g++
LD = $(ARCH)-elf-ld

CXXFLAGS = -Os -ffreestanding -fno-rtti -fno-exceptions -fno-stack-protector -mno-red-zone -Wall -Wextra -Werror $(KERNEL_CFLAGS_$(ARCH)) -I$(PWD) -I$(PWD)/stdlib -I$(PWD)/arch/$(ARCH) -I$(PWD)/platform/multiboot -DZAGTOS_LOADER

LDFLAGS = -Os -nostdlib -static -z max-page-size=0x1000 -T platform/multiboot/linker.ld

all-multiboot: $(TARGET)

$(TARGET): $(CXX_OBJS) $(ASM_OBJS)
	mkdir -p $(dir $@)
	$(CXX) $(LDFLAGS) -o $@ $^

$(PLATFORM_MULTIBOOT_BUILD_DIR)/%.o: %.asm
	mkdir -p $(dir $@)
	nasm -f elf64 -o $@ $^

$(PLATFORM_MULTIBOOT_BUILD_DIR)/%.o: %.cpp $(CXX_HEADERS)
	mkdir -p $(dir $@)
	$(CXX) $(CXXFLAGS) -c -o $@ $<

clean:
	rm -f $(CXX_OBJS) $(ASM_OBJS) $(EFIFILE) $(SOFILE)

