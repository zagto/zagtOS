#include <EFI.hpp>

namespace efi {

EFI_HANDLE ImageHandle;

#define STATUS_CASE(symbol) \
    case symbol: \
        return #symbol; \
        break;


const char *statusToString(EFI_STATUS status) {
    switch (status) {
        STATUS_CASE(EFI_SUCCESS)
        STATUS_CASE(EFI_LOAD_ERROR)
        STATUS_CASE(EFI_INVALID_PARAMETER)
        STATUS_CASE(EFI_UNSUPPORTED)
        STATUS_CASE(EFI_BAD_BUFFER_SIZE)
        STATUS_CASE(EFI_BUFFER_TOO_SMALL)
        STATUS_CASE(EFI_NOT_READY)
        STATUS_CASE(EFI_DEVICE_ERROR)
        STATUS_CASE(EFI_WRITE_PROTECTED)
        STATUS_CASE(EFI_OUT_OF_RESOURCES)
        STATUS_CASE(EFI_VOLUME_CORRUPTED)
        STATUS_CASE(EFI_VOLUME_FULL)
        STATUS_CASE(EFI_NO_MEDIA)
        STATUS_CASE(EFI_MEDIA_CHANGED)
        STATUS_CASE(EFI_NOT_FOUND)
        STATUS_CASE(EFI_ACCESS_DENIED)
        STATUS_CASE(EFI_NO_RESPONSE)
        STATUS_CASE(EFI_NO_MAPPING)
        STATUS_CASE(EFI_TIMEOUT)
        STATUS_CASE(EFI_NOT_STARTED)
        STATUS_CASE(EFI_ALREADY_STARTED)
        STATUS_CASE(EFI_ABORTED)
        STATUS_CASE(EFI_ICMP_ERROR)
        STATUS_CASE(EFI_TFTP_ERROR)
        STATUS_CASE(EFI_PROTOCOL_ERROR)
        STATUS_CASE(EFI_INCOMPATIBLE_VERSION)
        STATUS_CASE(EFI_SECURITY_VIOLATION)
        STATUS_CASE(EFI_CRC_ERROR)
        STATUS_CASE(EFI_END_OF_MEDIA)
        STATUS_CASE(EFI_END_OF_FILE)
        STATUS_CASE(EFI_WARN_UNKNOWN_GLYPH)
        STATUS_CASE(EFI_WARN_DELETE_FAILURE)
        STATUS_CASE(EFI_WARN_WRITE_FAILURE)
        STATUS_CASE(EFI_WARN_BUFFER_TOO_SMALL)
    default:
        return "Unknown Status";
    }
}

}
