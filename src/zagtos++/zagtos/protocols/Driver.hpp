#pragma once

#include <zagtos/UUID.hpp>
#include <zagtos/Messaging.hpp>

namespace zagtos {
namespace driver {

static constexpr UUID CONTROLLER_TYPE_ROOT(
            0x98, 0x98, 0xc3, 0xdf, 0xc1, 0x49, 0x43, 0xd4,
            0x87, 0x11, 0x52, 0x12, 0x4e, 0x1a, 0x9a, 0xa6);
static constexpr UUID CONTROLLER_TYPE_PCI(
            0xdb, 0x5a, 0x9e, 0x01, 0xa5, 0x4e, 0x46, 0xd4,
            0xb7, 0x91, 0x0c, 0x10, 0xd5, 0xc7, 0xbe, 0x6f);
static constexpr UUID CONTROLLER_TYPE_PS2(
            0x8f, 0xbb, 0x96, 0x55, 0x47, 0xbb, 0x4f, 0x1f,
            0xbf, 0x38, 0x28, 0x70, 0xe0, 0x7b, 0x9d, 0x85);

static constexpr UUID MSG_START(
            0xa9, 0x22, 0x07, 0x53, 0xcf, 0x59, 0x45, 0x07,
            0x91, 0x1a, 0xd9, 0xd3, 0x96, 0x3d, 0x41, 0x94);
static constexpr UUID MSG_START_RESULT(
            0x57, 0x53, 0xee, 0x5c, 0xbe, 0x55, 0x48, 0xdb,
            0xa2, 0x96, 0xac, 0x08, 0xe3, 0x9e, 0x6e, 0xfd);
static constexpr UUID MSG_FOUND_DEVICE(
            0x73, 0xd3, 0xe1, 0x87, 0x62, 0x83, 0x46, 0x4a,
            0xb8, 0xc3, 0x9c, 0x1d, 0x90, 0xab, 0x0e, 0x69);
static constexpr UUID MSG_FOUND_CONTROLLER(
            0x6e, 0x52, 0xbe, 0x26, 0x46, 0xc4, 0x48, 0x39,
            0x88, 0x39, 0xa8, 0x63, 0x19, 0xa4, 0xfd, 0xbf);
static constexpr UUID MSG_FOUND_CLASS_DEVICE(
            0x27, 0x30, 0xe6, 0x32, 0x11, 0x07, 0x4f, 0x6f,
            0x84, 0xef, 0x5c, 0xfc, 0x1b, 0x00, 0xb9, 0x6f);

/* don't use enum, so these IDs get encoded as UINT64 automatically */
namespace RootDevice {
static constexpr uint64_t PCI_CONTROLLER = 0;
static constexpr uint64_t PS2_CONTROLLER = 1;
};

}
}
