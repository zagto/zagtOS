#pragma once

#include <common/common.hpp>

extern "C" void basicLock(volatile size_t &value);
extern "C" void basicUnlock(volatile size_t &value);

class mutex {
private:
    volatile size_t value{0};

public:
    void lock() {
        basicLock(value);
    }
    void unlock() {
        if (!value) {
            cout << "Attempt to unlock non-locked lock" << endl;
            Panic();
        }
        basicUnlock(value);
    }
    bool isLocked() {
        return value;
    }
};

class lock_guard {
private:
    mutex &_mutex;

public:
    lock_guard(mutex &_mutex) : _mutex{_mutex} {
        _mutex.lock();
    }
    lock_guard(lock_guard &other) = delete;
    ~lock_guard() {
        _mutex.unlock();
    }
};
