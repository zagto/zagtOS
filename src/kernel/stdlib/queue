#pragma once

#include <vector>

template<typename T>
class queue {
private:
    vector<T> buffer;
    size_t firstIndex{0};

public:
    /* not implemented for now, but there is nothing wrong with copying/moving queues
     * implement this if you need it */
    void operator=(queue &) = delete;
    void operator=(queue &&other) {
        buffer = move(other.buffer);
        firstIndex = other.firstIndex;
        other.firstIndex = 0;
    }

    void push_back(T &&newElement) {
        buffer.push_back(move(newElement));
    }
    void push_back(const T& newElement) {
        buffer.push_back(newElement);
    }
    bool empty() const {
        assert(firstIndex <= buffer.size());
        return firstIndex == buffer.size();
    }
    T& top() {
        assert(!empty());
        return buffer[firstIndex];
    }
    void pop() {
        buffer[firstIndex] = T();
        firstIndex++;

        if (firstIndex * 2 >= buffer.size()) {
            /* move elements to front and shrink vector */
            for (size_t index = 0; index < size(); index++) {
                buffer[index] = move(buffer[index + firstIndex]);
            }
            buffer.resize(size());
            firstIndex = 0;
        }
    }
    size_t size() {
        return buffer.size() - firstIndex;
    }
    /* non-standard */
    void remove(const T &element) {
        buffer.remove(element);
    }
};
